input {
  file {
    path => "/var/log/solr.log.*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  # Extract event severity and timestamp
  grok {
    match => { "message" => "%{WORD:level}.+?- %{DATA:LogTime};" }
      tag_on_failure => []
  }

  multiline {
    pattern => "%{WORD}.+?- %{DATA};"
    negate => true
    what => "previous"
    add_tag => []
  }

  # INFO level events treated differently than ERROR
  if "INFO" in [level] {
    grok {
      match => {
          "message" => ".+?; ((([a-zA-Z]+(\.|;|:))+) )+?\[%{WORD:collection}\].+?path=%{DATA:endpoint} params=\{%{DATA:params}\}.+?\{%{WORD:action}=\[%{DATA:docId}"
        }
        tag_on_failure => []
    }
    if [params] {
      kv {
        field_split => "&"
        source => "params"
      }
    } else {
      grok {
        match => {
          "message" => ".+?; ((([a-zA-Z]+(\.|;|:))+) )+?commits"
        }
        tag_on_failure => [ "drop" ]
        add_field => {
          "action" => "commit"
        }
      }
      if "drop" in [tags] {
        drop {}
      }
    }
  }

  # Error event implies stack track, which requires multiline parsing
  if "ERROR" in [level] {
      grok {
        match => {
          "message" => ".+?; ((([a-zA-Z]+(\.|;|:))+) )+%{DATA:reason}(\n\t)((.+?Caused by: ((([a-zA-Z]+(\.|;|:))+) )+)%{DATA:reason}(\n\t))+"
        }
        tag_on_failure => []
      }
      grok {
        match => {
          "message" => ".+?; ((([a-zA-Z]+(\.|;|:))+) )+?Error: %{GREEDYDATA:reason}"
        }
        tag_on_failure => []
      }
  }

  # Remove intermediate tags, and multiline added randomly by multiline stage
  mutate {
      remove_tag => [ "multiline" ]
  }

  # Drop empty lines
  if [message] =~ /^\s*$/ {
    drop {}
  }
}

output {
  elasticsearch_http {
    host => "elasticsearch"
    template => "/usr/share/logstash/pipeline/solr_log_template.json"
    index => "solr_log_%{+YYYY.MM.dd}"
    template_overwrite => true
  }
}


# http://blog.comperiosearch.com/blog/2015/09/21/solr-logstash-analysis/
# https://gist.github.com/sebnmuller/41ca2c34c50d0d9d8e82
